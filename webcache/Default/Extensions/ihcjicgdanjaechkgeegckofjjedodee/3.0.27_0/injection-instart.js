try{!function(){var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="c93d5db1-c09b-4ef4-8cf4-f2593521c041",e._sentryDebugIdIdentifier="sentry-dbid-c93d5db1-c09b-4ef4-8cf4-f2593521c041")}()}catch(e){}!function(){try{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{}).SENTRY_RELEASE={id:"bbc19cc73576afd604112a416922cb97dd94e7c3"}}catch(e){}}(),(()=>{var e=new URLSearchParams(document.currentScript.src.split("?")[1]).get("extId");console.debug("INS: Instart scanner loaded into "+window.location.href+" by "+e),function(){function n(e){if(document.currentScript&&document.currentScript.textContent){let n=document.currentScript.textContent,t=["Instart","instart","INSTART","I10C","I11C","I12C","IXC_353_1119062411120848"];for(let o of t)if(n.includes(o))throw new Error("Instart "+e+" Logic")}}function t(n,t){console.debug("INS: Sending an is-whitelisted request about "+t),console.debug("INS: Extension ID "+e);const o={href:window.location.href,prop:t};console.debug("INS:checking isInstartWhitelisted for ",{params:o}),window.postMessage({type:"isInstartWhitelisted",parameters:JSON.stringify(o)},`${window.location.protocol}//${window.location.host}`)}t(window,"INSTART"),t(window,"INSTART_TARGET_NAME"),t(window,"I10C"),t(window,"I11C"),t(window,"I12C"),t(window,"IXC_353_1119062411120848");let o=window.setTimeout;window.setTimeout=function(){return n("Timeout"),o.apply(window,arguments)};let i=window.setInterval;window.setInterval=function(){return n("Interval"),i.apply(window,arguments)},window.addEventListener("message",e=>{if(!e.origin)return;if(e.origin!==window.location.origin)return;const t=new URL(e.origin).host;if("isInstartWhitelistedResponse"===e.data.type&&t===window.location.host){console.debug("INS: got isInstartWhitelistedResponse for ",{event:e});const t=JSON.parse(e.data.parameters);!1===t.isWhitelisted&&function(e,t){console.debug("INS: "+t+" hooked for "+window.location.href);let o=e[t];Object.defineProperty(e,t,{get:function(){return n(t),o},set:function(e){n(t),o=e}})}(window,t.property)}})}()})();
//# sourceMappingURL=injection-instart.js.map