{"version":3,"file":"injection-instart.js","mappings":"mnBAAA,IACIA,EADe,IAAIC,gBAAgBC,SAASC,cAAcC,IAAIC,MAAM,KAAK,IAClDC,IAAI,SAE/BC,QAAQC,MAAM,oCAAsCC,OAAOC,SAASC,KAAO,OAASX,GACpF,WACI,SAASY,EAAqBC,GAC1B,GAAIX,SAASC,eAAiBD,SAASC,cAAcW,YAAa,CAC9D,IAAIC,EAAab,SAASC,cAAcW,YACpCE,EAAW,CAAC,UAAW,UAAW,UAAW,OAAQ,OAAQ,OAAQ,4BACzE,IAAK,IAAIC,KAAWD,EAChB,GAAID,EAAWG,SAASD,GACpB,MAAM,IAAIE,MAAM,WAAaN,EAAQ,SAGjD,CACJ,CAeA,SAASO,EAAKC,EAAQC,GAClBf,QAAQC,MAAM,gDAAkDc,GAChEf,QAAQC,MAAM,qBAAuBR,GAErC,MAAMuB,EAAS,CACXZ,KAAMF,OAAOC,SAASC,KACtBa,KAAMF,GAGVf,QAAQC,MAAM,yCAA0C,CAACe,WACzDd,OAAOgB,YAAY,CACfC,KAAM,uBACNC,WAAYC,KAAKC,UAAUN,IAC5B,GAAGd,OAAOC,SAASoB,aAAarB,OAAOC,SAASqB,OACvD,CAEAX,EAAMX,OAAQ,WACdW,EAAMX,OAAQ,uBACdW,EAAMX,OAAQ,QACdW,EAAMX,OAAQ,QACdW,EAAMX,OAAQ,QACdW,EAAMX,OAAQ,4BAEd,IAAIuB,EAAgBvB,OAAOwB,WAC3BxB,OAAOwB,WAAa,WAEhB,OADArB,EAAqB,WACdoB,EAAcE,MAAMzB,OAAQ0B,UACvC,EAEA,IAAIC,EAAiB3B,OAAO4B,YAC5B5B,OAAO4B,YAAc,WAEjB,OADAzB,EAAqB,YACdwB,EAAeF,MAAOzB,OAAQ0B,UACzC,EAEA1B,OAAO6B,iBAAiB,UAAYC,IAChC,IAAKA,EAAMC,OACP,OAEJ,GAAID,EAAMC,SAAW/B,OAAOC,SAAS8B,OACjC,OAEJ,MACMC,EADY,IAAIC,IAAIH,EAAMC,QACJT,KAC5B,GAAwB,iCAApBQ,EAAMI,KAAKjB,MAA2Ce,IAAchC,OAAOC,SAASqB,KAAM,CAC1FxB,QAAQC,MAAM,6CAA8C,CAAC+B,UAC7D,MAAMhB,EAASK,KAAKgB,MAAML,EAAMI,KAAKhB,aACR,IAAzBJ,EAAOsB,eA5DnB,SAAgBxB,EAAQC,GACpBf,QAAQC,MAAM,QAAUc,EAAW,eAAiBb,OAAOC,SAASC,MACpE,IAAImC,EAAQzB,EAAOC,GACnByB,OAAOC,eAAe3B,EAAQC,EAAU,CACpChB,IAAK,WAC+B,OAAhCM,EAAqBU,GAAkBwB,CAC3C,EACAG,IAAK,SAASC,GACVtC,EAAqBU,GAAWwB,EAAQI,CAC5C,GAER,CAkDYC,CAAO1C,OAAQc,EAAOD,SAE9B,GAEP,CA9ED,E","sources":["webpack://browser-guard/./guard-app/app/scripts/injection-instart.js"],"sourcesContent":["var searchParams = new URLSearchParams(document.currentScript.src.split('?')[1]);\nvar mbExtId = searchParams.get('extId');\n\nconsole.debug(\"INS: Instart scanner loaded into \" + window.location.href + \" by \" + mbExtId);\n(function() {\n    function checkForInstartLogic(label) {\n        if (document.currentScript && document.currentScript.textContent) {\n            let scriptText = document.currentScript.textContent;\n            let keywords = [\"Instart\", \"instart\", \"INSTART\", \"I10C\", \"I11C\", \"I12C\", \"IXC_353_1119062411120848\"];\n            for (let keyword of keywords) {\n                if (scriptText.includes(keyword)) {\n                    throw new Error(\"Instart \" + label + \" Logic\");\n                }\n            }\n        }\n    }\n\n    function onHook(object, property) {\n        console.debug(\"INS: \" + property + \" hooked for \" + window.location.href);\n        let value = object[property];\n        Object.defineProperty(object, property, {\n            get: function() {\n                checkForInstartLogic(property); return value;\n            },\n            set: function(newValue) {\n                checkForInstartLogic(property); value = newValue;\n            }\n        });\n    }\n\n    function hook(object, property) {\n        console.debug(\"INS: Sending an is-whitelisted request about \" + property);\n        console.debug(\"INS: Extension ID \" + mbExtId);\n        // fallback to window.postMessage for Safari and Firefox\n        const params = {\n            href: window.location.href,\n            prop: property,\n        };\n\n        console.debug(\"INS:checking isInstartWhitelisted for \", {params});\n        window.postMessage({\n            type: 'isInstartWhitelisted',\n            parameters: JSON.stringify(params),\n        }, `${window.location.protocol}//${window.location.host}`);\n    }\n\n    hook( window, \"INSTART\" );\n    hook( window, \"INSTART_TARGET_NAME\" );\n    hook( window, \"I10C\" );\n    hook( window, \"I11C\" );\n    hook( window, \"I12C\" );\n    hook( window, \"IXC_353_1119062411120848\" );\n\n    let oldSetTimeout = window.setTimeout;\n    window.setTimeout = function() {\n        checkForInstartLogic(\"Timeout\");\n        return oldSetTimeout.apply(window, arguments);\n    };\n\n    let oldSetInterval = window.setInterval;\n    window.setInterval = function() {\n        checkForInstartLogic(\"Interval\");\n        return oldSetInterval.apply( window, arguments );\n    };\n\n    window.addEventListener('message', (event) => {\n        if (!event.origin) {\n            return;\n        }\n        if (event.origin !== window.location.origin) {\n            return;\n        }\n        const originUrl = new URL(event.origin);\n        const eventHost = originUrl.host;\n        if (event.data.type === 'isInstartWhitelistedResponse' && eventHost === window.location.host) {\n            console.debug(\"INS: got isInstartWhitelistedResponse for \", {event});\n            const params = JSON.parse(event.data.parameters);\n            if (params.isWhitelisted === false) {\n                onHook(window, params.property);\n            }\n        }\n    });\n})();\n"],"names":["mbExtId","URLSearchParams","document","currentScript","src","split","get","console","debug","window","location","href","checkForInstartLogic","label","textContent","scriptText","keywords","keyword","includes","Error","hook","object","property","params","prop","postMessage","type","parameters","JSON","stringify","protocol","host","oldSetTimeout","setTimeout","apply","arguments","oldSetInterval","setInterval","addEventListener","event","origin","eventHost","URL","data","parse","isWhitelisted","value","Object","defineProperty","set","newValue","onHook"],"sourceRoot":""}