import{MSG_IS_PREMIUM,MSG_IS_TRIAL,MSG_SETTINGS_GET,MSG_SETTINGS_SET,MSG_TAB_DATA_GET,RELOAD_ON_CLOSE_PORT,SETTING_KILLSWITCH,SETTING_NATIVE_MESSAGING,SETTING_TELEMETRY_CONSENT,MSG_QUERY_FEATURE_FLAG,IS_URL_PERM_REMOVED_FLAG,DEFAULT_PERMISSIONS,MSG_UPDATE_PROTECTION_ON_PERM_CHANGE,MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,MV3_PROTECTION_ADS,SETTING_ADS,SETTING_MALWARE,SETTING_SCAMS,MV3_PROTECTION_MALWARE,MV3_PROTECTION_SCAMS,CSS_NOTIFICATION_INFO,CSS_GLOBAL_NOTIFICATION,BROWSERS,MSG_CLOSE_POPUP,BROWSER_PERMISSIONS,EXCLUSION_ADS,EXCLUSION_MALWARE,EXCLUSION_SCAMS,CSS_NOTIFICATION_WARNING,MSG_GET_ALL_PERMISSIONS}from"../app-consts";import{translateText}from"@/utils/locales.ts";import{simpleStorageGet}from"@/utils/storage.ts";import{chrome}from"../../../utils/polyfill.ts";import{msgPromptNativeMsg,msgRemoveNativeMessaging}from"../../../utils/native-messaging.ts";import{browserName}from"../../../utils/utils";export const PageType={NORMAL:"NORMAL",SYSTEM:"SYSTEM",EXTENSION:"EXTENSION",BROWSER_GUARD:"BROWSER_GUARD",BLANK_NEW_TAB:"BLANK_NEW_TAB",CHROME_WEBSTORE:"CHROME_WEBSTORE"};const SETTING_WITH_URL_PERMISSIONS=[SETTING_ADS,SETTING_MALWARE,SETTING_SCAMS],port={reload:null},exclusionToSettingsMapper={[EXCLUSION_ADS]:SETTING_ADS,[EXCLUSION_MALWARE]:SETTING_MALWARE,[EXCLUSION_SCAMS]:SETTING_SCAMS};export const reloadOnClose=function(){port.reload||(port.reload=chrome.runtime.connect({name:RELOAD_ON_CLOSE_PORT}),console.debug("Began listening for a popup close event"))};export const showGlobalNotification=(e,s=CSS_NOTIFICATION_INFO,t=3e3)=>{const r=document.getElementById(CSS_GLOBAL_NOTIFICATION);r.classList.add(s),r.innerHTML=e,r.style.display="flex",setTimeout(()=>{r.style.display="none"},t)};const settingsGet=function(e,s,t){t||(t=e=>console.error(e)),chrome.runtime.sendMessage({type:MSG_SETTINGS_GET,payload:e},function(e){!e||e.error?t("Error calling settingsGet: "+(e?e.error:"No response received")):s(e.success)})};export const settingsGetAsync=e=>new Promise((s,t)=>{chrome.runtime.sendMessage({type:MSG_SETTINGS_GET,payload:e},function(e){!e||e.error?(console.debug("SETTINGS GET ASYNC: ERROR CALLING settingsGet"),t(`Error calling settingsGet: ${e?e.error:"No response received"}`)):s(e.success)})});export const getSettingsByEclusion=async e=>{const s=exclusionToSettingsMapper[e];return s?await settingsGetAsync(s):(console.error(`No setting found for exclusion: ${e}`),null)};export function featureFlagGetAsync(e){return new Promise((s,t)=>{chrome.runtime.sendMessage({type:MSG_QUERY_FEATURE_FLAG,payload:{feature:e}},r=>{r?s(r.isEnabled):t(new Error(`Error getting feature flag for ${e}`))})})}export const getAllPermissionsAsync=()=>new Promise((e,s)=>{chrome.runtime.sendMessage({type:MSG_GET_ALL_PERMISSIONS},t=>{!t||t.error?s(new Error(`Error getting permissions: ${t?t.error:"No response received"}`)):e(t.success)})});export const settingsSetAsync=e=>new Promise((s,t)=>{chrome.runtime.sendMessage({type:MSG_SETTINGS_SET,payload:e},function(e){!e||e.error?t(`Error calling settingsSet: ${e?e.error:"No response received"}`):s(e.success)})});export const updateCheckboxDisabledState=function(e,s){$(e).prop("disabled",s),updateCheckboxParentToState(e)};const linkCheckboxToKillswitch=async function(e,s){if(s!==SETTING_KILLSWITCH&&s!==SETTING_TELEMETRY_CONSENT&&s!==SETTING_NATIVE_MESSAGING&&e){const s=await getKillswitchStateAsync();$(e).prop("disabled",!1===s)}};export const getKillswitchState=function(e){settingsGet(SETTING_KILLSWITCH,e)};export const getKillswitchStateAsync=()=>settingsGetAsync(SETTING_KILLSWITCH);export const updateCheckboxParentToState=e=>{let s=$(e).parent();e.checked?s.addClass("checked"):s.removeClass("checked"),!0===$(e).prop("disabled")?s.addClass("disabled"):s.removeClass("disabled")};export const isFFUrlPermissionRemovedSkip=async(e=null)=>!(e&&!SETTING_WITH_URL_PERMISSIONS.includes(e))&&!!await simpleStorageGet(IS_URL_PERM_REMOVED_FLAG);const bindSettingsCheckboxEvent=async function(e,s,t){e.addEventListener("change",async r=>{if(browserName()==BROWSERS.FIREFOX&&await isFFUrlPermissionRemovedSkip(s))return r.preventDefault(),r.target.checked=!1,void showGlobalNotification(`\n                <span class="pseudo-xmark"></span>${chrome.i18n.getMessage("URLPermissionRequired")}\n            `,CSS_NOTIFICATION_WARNING);let o=$(e).prop("disabled");console.debug("CB: Default state of "+e.id+" is "+(o?"disabled":"active")),$(e).prop("disabled",!0);let n={};n[s]=$(e).prop("checked"),updateCheckboxParentToState(e),s===SETTING_NATIVE_MESSAGING&&(n[s]?n[s]=await msgPromptNativeMsg():n[s]=await msgRemoveNativeMessaging()),s!==SETTING_KILLSWITCH&&await settingsSetAsync(n),console.debug("CB: Setting has been stored for "+e.id),t&&t(r),setTimeout(()=>{console.debug("CB: Restoring "+e.id+" to "+(o?"disabled":"active")),updateCheckboxDisabledState(e,o)},750),s!==SETTING_KILLSWITCH&&reloadOnClose()})},validatePageForInjection=e=>new Promise((s,t)=>{let r={id:e.id,url:e.url,isValid:!0,pageType:PageType.NORMAL,host:e.url,blocked:{totals:{}},redirectType:null,redirectSubType:null};if(r.url.startsWith("chrome://"))r.isValid=!1,r.url.startsWith("chrome://newtab/")?r.pageType=PageType.BLANK_NEW_TAB:r.pageType=PageType.SYSTEM;else if(r.url.startsWith("chrome-extension://")||r.url.startsWith("moz-extension://")||r.url.startsWith("extension://"))if(r.isValid=!1,r.url.startsWith(`chrome-extension://${chrome.runtime.id}/`)||window.browser&&r.url.startsWith(`moz-extension://${chrome.i18n.getMessage("@@extension_id")}/`)||r.url.startsWith(`extension://${chrome.runtime.id}/`)){r.pageType=PageType.BROWSER_GUARD;let s=new URL(e.url).searchParams;s.has("url")&&(r.url=s.get("url")),s.has("host")&&(r.host=s.get("host")),s.has("type")&&(r.redirectType=s.get("type")),s.has("subtype")&&(r.redirectSubType=s.get("subtype"))}else r.pageType=PageType.EXTENSION;else r.url.startsWith("about:")?(r.isValid=!1,["about:newtab","about:blank"].some(e=>r.url.startsWith(e))?r.pageType=PageType.BLANK_NEW_TAB:r.pageType=PageType.SYSTEM):r.url.startsWith("edge://")?(r.isValid=!1,r.url.startsWith("edge://newtab/")?r.pageType=PageType.BLANK_NEW_TAB:r.pageType=PageType.SYSTEM):r.url.indexOf("chromewebstore.google.com")>=0&&(r.isValid=!1,r.pageType=PageType.CHROME_WEBSTORE);s(r)});export const sharedAddBackground=()=>{document.body.classList.add("mb-landscape")};export const sharedRemoveBackground=()=>{document.body.classList.remove("mb-landscape")};export const sharedSwitchToAppBar=(e,s)=>{$(".mb-current-website-tab span").text(e),$(".header-container-tabs .first-tab").removeAttr("style"),$(".header-container-tabs .first-tab").removeClass("mb-tabs"),$(".header-container-tabs .first-tab").addClass("mb-dynamic-tab"),!0===s&&$(".mb-current-website-tab span").addClass("needs-premium"),$("#dashboard-stats-tab").css("display","none"),$("#dashboard-upsell-tab").css("display","none"),$(".back-span").css("display","flex"),$(".globe").css("display","none"),$(".mb-stats-tab").addClass("hidden")};export const linkCheckboxToSetting=async function(e,s,t,r){t&&$(t).addClass("active");let o=document.getElementById(e);if(!o)return;await linkCheckboxToKillswitch(o,s);const n=await settingsGetAsync(s);o.checked=s!==SETTING_NATIVE_MESSAGING?!1!==n:n,updateCheckboxParentToState(o),t&&$(t).removeClass("active"),await bindSettingsCheckboxEvent(o,s,r)};export const isTrial=(e,s)=>{s||(s=e=>console.error(e)),chrome.runtime.sendMessage({type:MSG_IS_TRIAL},function(t){!t||t.error?s("Error calling isTrial: "+(t?t.error:"No response received")):e(t.success)})};export const isPremium=()=>new Promise((e,s)=>{chrome.runtime.sendMessage({type:MSG_IS_PREMIUM},function(t){!t||t.error?(console.error("Failed to check if premium: "+t.error),s(t.error)):(console.debug("Is premium: "+t.success),e(t.success))})});export const getCurrentTabData=(e,s)=>{s||(s=e=>console.error(e)),new Promise(e=>{chrome.tabs.query({currentWindow:!0,active:!0},function(s){e(s)})}).then(e=>validatePageForInjection(e[0])).then(s=>{s.isValid?chrome.runtime.sendMessage({type:MSG_TAB_DATA_GET,payload:s.id},function(t){!t||t.error?(e(s),console.error("Error calling getCurrentTabData: "+(t?t.error:"No response received"))):(s.blocked=t.success.blocked,s.host=t.success.host,s.excluded=t.success.excluded,e(s))}):e(s)}).catch(e=>{s(e)})};export const ellipsisSlice=(e,s=22)=>`${e.slice(0,s)}...`;export function downloadJSONfile(e,s){const t=new Blob([JSON.stringify(e)],{type:"application/json"}),r=URL.createObjectURL(t);chrome.downloads.download({url:r,filename:s,saveAs:!0})}export const closePopup=()=>{chrome.runtime.sendMessage({type:MSG_CLOSE_POPUP},function(e){if(!e)throw new Error("Failed to close the popup");console.log("Popup closed successfully")})};export async function requestAccessPermissions(e){const s=await chrome.permissions.request(e),t=await(async e=>e?(console.log("Permission was granted",await chrome.permissions.getAll()),!0):(console.log("Permission was refused"),!1))(s);return console.log("Permissions request operation result:",t),t}export async function removeAccessPermissions(e){const s=await chrome.permissions.remove(e),t=await(async e=>e?(console.log("Permission was removed",await chrome.permissions.getAll()),!0):(console.log("Permission was not removed"),!1))(s);return console.log("Permissions remove operation result:",t),t}export const handleFFPermissionRequestBtn=async()=>{const e={origins:DEFAULT_PERMISSIONS.origins};await requestAccessPermissions(e)&&(chrome.runtime.sendMessage({type:MSG_UPDATE_PROTECTION_ON_PERM_CHANGE,payload:{status:!0}}),chrome.runtime.sendMessage({type:MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,protection:MV3_PROTECTION_ADS,enable:!0}),chrome.runtime.sendMessage({type:MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,protection:MV3_PROTECTION_MALWARE,enable:!0}),chrome.runtime.sendMessage({type:MSG_MV3_TOGGLE_INDIVIDUAL_PROTECTION,protection:MV3_PROTECTION_SCAMS,enable:!0}))};export const showFFPermsRequestBarByFlag=async e=>{await simpleStorageGet(IS_URL_PERM_REMOVED_FLAG)&&(e.querySelector(".url-permission-bar").style.display="flex",translateText([{id:"permission-req-bar-desc",msg:"SettingsPermissionReqBarDesc"},{id:"permission-req-bar-btn",msg:"SettingsPermissionReqBarBtn"}],e),e.querySelector(".url-permission-bar #permission-req-bar-btn").addEventListener("click",handleFFPermissionRequestBtn))};export const getUngrantedPermissions=async()=>{const e=browserName(),s=[...BROWSER_PERMISSIONS[e]?.permissions||[],...BROWSER_PERMISSIONS[e]?.origins||[]],t=await getAllPermissionsAsync();return s.filter(e=>!t?.permissions?.includes(e))||[]};export async function showOptionalPermRequestBar(e){(await getUngrantedPermissions()).length>0?(e.querySelector(".url-permission-bar").style.display="flex",translateText([{id:"permission-req-bar-desc",msg:"OptionalPermissionReqBarDesc"},{id:"permission-req-bar-btn",msg:"OptionalPermissionReqBarBtn"}],e),e.querySelector(".url-permission-bar #permission-req-bar-btn").addEventListener("click",async()=>{const e=chrome.runtime.getURL("app/eventpages/permission-request.html");await chrome.tabs.create({url:e})})):e.querySelector(".url-permission-bar").style.display="none"}export async function isExtensionPinnedOnToolbar(){try{const e=await chrome.action.getUserSettings();return Boolean(e?.isOnToolbar)}catch(e){return console.error("Failed to get user settings (extension pinned):",e),!1}}